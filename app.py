# Salve este c√≥digo em um arquivo chamado 'app.py'

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import base64

def obter_dados_acoes(codigos):
    try:
        dados = yf.download(codigos, period='1y')['Adj Close']
        return dados
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel obter os dados: {e}")
        return None

def simular_portfolios(dados, num_simulacoes):
    retornos_diarios = dados.pct_change().dropna()
    medias_retornos = retornos_diarios.mean()
    covariancia = retornos_diarios.cov()

    num_acoes = len(dados.columns)
    resultados = []

    for _ in range(num_simulacoes):
        pesos = np.random.dirichlet(np.ones(num_acoes), size=1)[0]
        retorno_esperado = np.dot(pesos, medias_retornos) * 252
        risco = np.sqrt(np.dot(pesos.T, np.dot(covariancia * 252, pesos)))
        sharpe = retorno_esperado / risco
        resultados.append({
            'Retorno': retorno_esperado,
            'Risco': risco,
            'Sharpe': sharpe,
            'Pesos': pesos
        })

    return pd.DataFrame(resultados)

def plotar_frontier(resultados, melhor_portfolio):
    fig, ax = plt.subplots(figsize=(10,6))
    scatter = ax.scatter(resultados['Risco'], resultados['Retorno'], c=resultados['Sharpe'], cmap='viridis', alpha=0.7)
    ax.scatter(melhor_portfolio['Risco'], melhor_portfolio['Retorno'], color='red', s=100, label='Melhor Portf√≥lio')
    ax.set_xlabel('Risco (Desvio Padr√£o Anualizado)')
    ax.set_ylabel('Retorno Esperado Anualizado')
    ax.set_title('Fronteira Eficiente')
    ax.legend()
    cbar = plt.colorbar(scatter, ax=ax)
    cbar.set_label('√çndice de Sharpe')

    # Adicionar anota√ß√£o com informa√ß√µes
    ax.annotate(
        f"Sharpe: {melhor_portfolio['Sharpe']:.2f}\nRetorno: {melhor_portfolio['Retorno']:.2%}\nRisco: {melhor_portfolio['Risco']:.2%}",
        (melhor_portfolio['Risco'], melhor_portfolio['Retorno']),
        textcoords="offset points",
        xytext=(50,50),
        ha='left',
        fontsize=12,  # Aumentar o tamanho da fonte
        bbox=dict(boxstyle="round,pad=0.5", fc="white", ec="gray", lw=1),
        arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=0")
    )

    st.pyplot(fig)

def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def main():
    # Configurar a p√°gina com o nome e o √≠cone
    st.set_page_config(
        page_title="Investir com Elas",
        page_icon="üí∞",
        layout="wide"
    )

    # CSS para estiliza√ß√£o e plano de fundo
    def adicionar_estilo():
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url("data:image/jpg;base64,{get_base64_of_bin_file('background.jpg')}");
                background-size: cover;
                background-attachment: fixed;
            }}
            .transparente {{
                background-color: rgba(255, 255, 255, 0.85);
                padding: 20px;
                border-radius: 10px;
            }}
            h1, h2, h3, h4 {{
                color: #2E4053;
            }}
            p, li {{
                font-size:18px;
            }}
            strong {{
                font-weight: bold;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )

    adicionar_estilo()

    # Inicializar o estado da p√°gina
    if 'pagina' not in st.session_state:
        st.session_state['pagina'] = 'P√°gina Inicial'

    # Adicionar logo do projeto
    st.sidebar.image("logo.png", use_column_width=True)

    # Menu de navega√ß√£o
    menu = ["P√°gina Inicial", "Simulador de Portf√≥lio"]
    escolha = st.sidebar.selectbox("Navega√ß√£o", menu, index=menu.index(st.session_state['pagina']))

    if escolha == "P√°gina Inicial":
        st.session_state['pagina'] = 'P√°gina Inicial'
        # Conte√∫do da p√°gina inicial
        st.markdown('<div class="transparente">', unsafe_allow_html=True)
        st.title("Investir com Elas")
        st.header("Bem-vindo ao Investir com Elas")
        st.markdown("""
        Esta aplica√ß√£o tem como objetivo auxiliar pessoas que desejam aprender sobre investimentos em a√ß√µes e montar seus pr√≥prios portf√≥lios.
        """, unsafe_allow_html=True)

        st.subheader("A Matem√°tica por Tr√°s do Simulador")

        st.markdown(r"""
        A simula√ß√£o √© baseada na **Teoria Moderna de Carteiras** desenvolvida por **Harry Markowitz**, que busca otimizar a distribui√ß√£o de ativos para maximizar o retorno esperado dado um n√≠vel de risco aceit√°vel.

        **Retorno Esperado do Portf√≥lio ($E(R_p)$):**

        $$
        E(R_p) = \sum_{i=1}^{n} w_i \cdot E(R_i)
        $$

        Onde:

        - $w_i$ √© o **peso** (propor√ß√£o de investimento) do ativo $i$ no portf√≥lio.
        - $E(R_i)$ √© o **retorno esperado** do ativo $i$.

        **Interpreta√ß√£o:** O retorno esperado do portf√≥lio √© a m√©dia ponderada dos retornos esperados dos ativos que o comp√µem.

        **Risco do Portf√≥lio (Desvio Padr√£o $\sigma_p$):**

        $$
        \sigma_p = \sqrt{ \sum_{i=1}^{n} \sum_{j=1}^{n} w_i w_j \sigma_{ij} }
        $$

        Onde:

        - $\sigma_{ij}$ √© a **covari√¢ncia** entre os retornos dos ativos $i$ e $j$.
        - $\sigma_{ij} = \rho_{ij} \sigma_i \sigma_j$, onde $\rho_{ij}$ √© a **correla√ß√£o** entre os ativos $i$ e $j$.

        **Interpreta√ß√£o:** O risco do portf√≥lio leva em considera√ß√£o n√£o apenas o risco individual de cada ativo, mas tamb√©m como eles interagem entre si.

        **√çndice de Sharpe ($S_p$):**

        $$
        S_p = \frac{E(R_p) - R_f}{\sigma_p}
        $$

        Onde:

        - $E(R_p)$ √© o retorno esperado do portf√≥lio.
        - $R_f$ √© a **taxa livre de risco** (assumimos zero na simula√ß√£o).
        - $\sigma_p$ √© o risco (desvio padr√£o) do portf√≥lio.

        **Interpreta√ß√£o:** O √çndice de Sharpe mede a rela√ß√£o entre o retorno excedente do portf√≥lio (acima da taxa livre de risco) e seu risco. Quanto maior o √çndice de Sharpe, melhor √© a rela√ß√£o risco-retorno.

        **Teoria de Markowitz:**

        A teoria de Markowitz prop√µe que, para um dado n√≠vel de retorno esperado, existe um portf√≥lio com o menor risco poss√≠vel. A combina√ß√£o de todos esses portf√≥lios eficientes forma a **Fronteira Eficiente**. Investidores racionais devem escolher portf√≥lios na fronteira eficiente, otimizando o equil√≠brio entre retorno e risco.

        **Como a Simula√ß√£o Funciona:**

        - **Gera√ß√£o de Portf√≥lios Aleat√≥rios:** O simulador gera milhares de portf√≥lios com diferentes combina√ß√µes de pesos.
        - **C√°lculo de Retorno e Risco:** Para cada portf√≥lio, calculamos o retorno esperado e o risco.
        - **C√°lculo do √çndice de Sharpe:** Avaliamos a efici√™ncia de cada portf√≥lio utilizando o √çndice de Sharpe.
        - **Sele√ß√£o do Melhor Portf√≥lio:** O portf√≥lio com o maior √çndice de Sharpe √© considerado o mais eficiente em termos de risco e retorno.

        """, unsafe_allow_html=True)

        st.subheader("Videoaulas sobre Finan√ßas e Investimentos")
        st.write("A seguir, disponibilizamos algumas videoaulas ministradas por especialistas em finan√ßas:")
        
        # Espa√ßo para adicionar links de v√≠deos
        # Voc√™ pode substituir os links abaixo pelos v√≠deos que desejar
        video_urls = [
            "https://youtu.be/By9r8WlMkMw",
            "https://youtu.be/W-KeVi52atI",
            "https://youtu.be/Loj3Rv7xD2I"
        ]

        for url in video_urls:
            st.video(url)

        st.subheader("Profissionais Influentes no Mercado Financeiro")
        
        # Informa√ß√µes de profissionais influentes
        profissionais = [
            {
                "nome": "Sylvia Mathews Burwell",
                "contribuicoes": "Primeira mulher a servir como Diretora do Escrit√≥rio de Gest√£o e Or√ßamento dos EUA e Secret√°ria de Sa√∫de e Servi√ßos Humanos.",
                "citacao": "\"A lideran√ßa √© uma s√©rie de comportamentos, n√£o um papel para her√≥is.\"",
                "imagem": "sylvia_burwell.jpg"
            },
            {
                "nome": "Abigail Johnson",
                "contribuicoes": "CEO da Fidelity Investments, uma das maiores empresas de servi√ßos financeiros do mundo.",
                "citacao": "\"N√£o se trata apenas de ser uma mulher. Trata-se de ser capaz e estar disposta a assumir riscos.\"",
                "imagem": "abigail_johnson.jpg"
            },
            {
                "nome": "Muriel Siebert",
                "contribuicoes": "Primeira mulher a possuir uma posi√ß√£o na Bolsa de Valores de Nova York.",
                "citacao": "\"Nunca se conformem com menos do que voc√™s merecem.\"",
                "imagem": "muriel_siebert.jpg"
            },
            {
                "nome": "Mary Barra",
                "contribuicoes": "CEO da General Motors, liderando a empresa em inova√ß√£o e tecnologia.",
                "citacao": "\"N√£o tenha medo de assumir o que voc√™ n√£o conhece. Confie em si mesmo para aprender.\"",
                "imagem": "mary_barra.jpg"
            }
        ]

        for profissional in profissionais:
            st.markdown(f"### {profissional['nome']}")
            cols = st.columns([1, 3])
            with cols[0]:
                st.image(profissional['imagem'], width=150)
            with cols[1]:
                st.markdown(f"**Contribui√ß√µes**: {profissional['contribuicoes']}")
                st.markdown(f"**Cita√ß√£o**: *{profissional['citacao']}*")
            st.markdown("---")

        st.subheader("A Import√¢ncia da Educa√ß√£o Financeira")
        st.markdown("""
        Promover a educa√ß√£o financeira √© essencial para capacitar indiv√≠duos a tomarem decis√µes informadas sobre seus investimentos. Um mercado financeiro mais inclusivo e diversificado beneficia a todos, trazendo diferentes perspectivas e promovendo a inova√ß√£o.
        """)

        # Bot√£o para ir ao simulador
        if st.button("Ir para o Simulador"):
            st.session_state['pagina'] = "Simulador de Portf√≥lio"
            st.experimental_rerun()

        st.markdown('</div>', unsafe_allow_html=True)

    elif escolha == "Simulador de Portf√≥lio":
        st.session_state['pagina'] = 'Simulador de Portf√≥lio'
        st.markdown('<div class="transparente">', unsafe_allow_html=True)
        st.header("Monte seu Portf√≥lio de A√ß√µes")

        st.sidebar.subheader("Par√¢metros de Entrada")

        # Carregar a lista de a√ß√µes
        @st.cache_data
        def carregar_lista_acoes():
            df_acoes = pd.read_csv('tickers_b3.csv')
            df_acoes['option'] = df_acoes['code'] + ' - ' + df_acoes['company']
            return df_acoes

        df_acoes = carregar_lista_acoes()
        lista_acoes = df_acoes['option'].tolist()

        # Sele√ß√£o de a√ß√µes com multiselect
        codigos_selecionados = st.sidebar.multiselect(
            "Digite o c√≥digo ou nome da empresa e selecione as a√ß√µes:",
            options=lista_acoes
        )

        investimento_total_input = st.sidebar.number_input(
            "Investimento Total (R$):",
            min_value=0.0,
            value=10000.0,
            step=1000.0
        )

        if st.sidebar.button("Executar Simula√ß√£o"):
            if not codigos_selecionados:
                st.error("Por favor, selecione pelo menos uma a√ß√£o.")
                return

            with st.spinner('Obtendo dados e realizando simula√ß√µes...'):
                # Extrair os c√≥digos das a√ß√µes selecionadas
                codigos = [codigo.split(' - ')[0] for codigo in codigos_selecionados]

                investimento_total = float(investimento_total_input)
                num_acoes = len(codigos)
                num_simulacoes = max(1000, num_acoes * 500)

                dados = obter_dados_acoes(codigos)
                if dados is None or dados.empty:
                    st.error("Dados insuficientes para as a√ß√µes fornecidas.")
                    return

                resultados = simular_portfolios(dados, num_simulacoes)
                melhor_portfolio = resultados.loc[resultados['Sharpe'].idxmax()]

                plotar_frontier(resultados, melhor_portfolio)

                pesos_percentuais = melhor_portfolio['Pesos'] * 100
                alocacao = dict(zip(dados.columns, pesos_percentuais.round(2)))

                # Calcular o valor a ser investido em cada a√ß√£o
                valores_investimento = {acao: peso/100 * investimento_total for acao, peso in alocacao.items()}

                st.subheader("Melhor Portf√≥lio Encontrado")
                st.markdown(f"**Retorno Esperado Anualizado:** {melhor_portfolio['Retorno']:.2%}")
                st.markdown(f"**Risco Anualizado:** {melhor_portfolio['Risco']:.2%}")
                st.markdown(f"**√çndice de Sharpe:** {melhor_portfolio['Sharpe']:.2f}")
                st.markdown(f"**N√∫mero de Carteiras Simuladas:** {num_simulacoes}")

                st.subheader("Distribui√ß√£o de Investimento")
                alocacao_df = pd.DataFrame({
                    'A√ß√£o': alocacao.keys(),
                    'Peso (%)': alocacao.values(),
                    'Valor a Investir (R$)': valores_investimento.values()
                })
                alocacao_df = alocacao_df.merge(df_acoes[['code', 'company']], left_on='A√ß√£o', right_on='code')
                alocacao_df = alocacao_df[['A√ß√£o', 'company', 'Peso (%)', 'Valor a Investir (R$)']]

                st.table(alocacao_df.style.format({'Peso (%)': '{:.2f}%', 'Valor a Investir (R$)': 'R$ {:.2f}'}))
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.error("Sele√ß√£o inv√°lida.")

if __name__ == "__main__":
    main()
